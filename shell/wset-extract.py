#!/usr/bin/env python

import os, sys, getopt
import numpy as np

from argparse import ArgumentParser

from random import sample

from multiprocessing import Pool

from habis.formats import WaveformSet, loadkeymat
from habis.habiconf import matchfiles, numrange

def _checkoutdir(outspec):
	'''
	Check for existence of any directory portion in outspec.
	'''
	destdir = os.path.dirname(outspec)
	if destdir and not os.path.isdir(destdir):
		raise IOError('Destination %s is not a directory' % destdir)


def bsextract(wsets, outspec=None):
	'''
	Extract the backscatter waveforms from a map wsets from file names to
	WaveformSet objects, storing each waveform in its own single-tx,
	single-rx WaveformSet.

	If outspec is provided, it should be a string that will be converted
	into a file name by calling outspec.format(rx) for each receive channel
	rx. If outspec is None or empty, output names will be generated by
	appending output suffixes to the input file names.
	'''
	if outspec: _checkoutdir(outspec)

	for f, wset in wsets.items():
		obase = outspec or (os.path.splitext(f)[0] + '.Backscatter{0:05d}.wset')
		print('Extracting backscatter waves from file', f, 'to output spec', obase)

		for rx in wset.rxidx:
			try: wf = wset.getwaveform(rx, rx, maptids=True)
			except KeyError: continue

			hdr = wset.getheader(rx).copy(txgrp=None)
			bsw = WaveformSet.fromwaveform(wf, hdr=hdr, tid=rx, f2c=wset.f2c)

			bsw.store(obase.format(rx))


def trextract(wsets, trmap, random=None, outspec=None):
	'''
	Extract waveforms for arbitrary transmit-receive pairs from a map
	wsets from file names to WaveformSet objects, storing each in its own
	single-tx, single-rx WaveformSet.

	The desired transmit-receive pairs should be provided in the map
	trmap, which maps receive indices to lists of desired transmit indices.
	Each pair in trmap will be extracted only if that pair exists in one of
	the input files; missing pairs will be silently ignored. Note that a
	(t, r) pair will be considered "missing" if the transmitter index
	cannot be mapped to a transmission index in an input file.

	If random is True, it should be a float in the range (0, 1) or an
	integer no less than 1. If random is a float in (0, 1) range, it
	specifies a random sampling fraction. The total number of (t, r) pairs
	that will actually be extracted (after discarding pairs that do not
	exist in the inputs) will be multiplied by random and converted to an
	int, and the resulting number of (t, r) pairs will be extracted from
	the inputs. If random is at least 1, the random sampling fraction is
	computed by dividing the value of random by the total number of (t, r)
	pairs in trmap. In other words, if a collection of files contains all
	pairs in trmap, specifying an integer for random should result in a
	total number of extracted waveforms that approximately equals the value
	of random.

	If outspec is provided, it should be a string that will be converted
	into a file name by calling outspec.format(tx, rx) for each receive
	channel rx. If outspec is None or empty, output names will be generated
	by appending output suffixes to the input file names.
	'''
	if outspec: _checkoutdir(outspec)

	# Find the maximum number of (t, r) pairs
	ntrm = sum(len(v) for v in trmap.values())
	if random:
		if random >= 1: random = float(random) / ntrm
		else: random = float(random)
		if not 0 < random < 1:
			raise ValueError(f'Value of "random" must be in range (0, {ntrm})')

	for f, wset in wsets.items():
		obase = outspec or (os.path.splitext(f)[0] + '.Tx{0:05d}.Rx{1:05d}.wset')
		print('Extracting Tx,Rx pairs from file', f, 'to output spec', obase)

		# Determine a local portion of the trlist
		rset = set(wset.rxidx)
		tset = set(wset.txidx)
		trlist = [ (t, r) for r in rset.intersection(trmap)
				for t in tset.intersection(trmap[r]) ]
		# Randomly sample the list as desired
		if random: trlist = sample(trlist, int(len(trlist) * random))
		# Sort the trlist by receiver first
		trlist.sort(key=lambda x: (x[1], x[0]))
		for t, r in trlist:
			try: wf = wset.getwaveform(r, t, maptids=True)
			except KeyError: continue

			hdr = wset.getheader(r).copy(txgrp=None)
			trw = WaveformSet.fromwaveform(wf, hdr=hdr, tid=t, f2c=wset.f2c)
			trw.store(obase.format(t, r))


if __name__ == '__main__':
	parser = ArgumentParser(description='Extract waveforms from WaveformSet files')

	parser.add_argument('-o', '--outspec', type=str,
			metavar='outspec', default=None,
			help='Output format string, called as outspec.format(tx,rx)')
	parser.add_argument('-m', '--trmap', type=str, default=None,
			help='Receive-to-transmit-list map of pairs to extact')
	parser.add_argument('-r', '--random', type=float,
			help='Randomly select pairs from map (fraction or approximate count)')
	parser.add_argument('-g', '--groupmap', type=str, default=None,
			help='Group map to assign to each WaveformSet to map extractions')

	parser.add_argument('inputs', type=str, nargs='+',
			help='Input WaveformSet files from which to extract')

	args = parser.parse_args(sys.argv[1:])

	# Try to read all input WaveformSets
	infiles = matchfiles(args.inputs)
	wsets = { f: WaveformSet.fromfile(f) for f in infiles }

	if args.groupmap:
		# Assign a group map as appropriate
		groupmap = loadkeymat(args.groupmap)
		for ws in wsets.values(): ws.groupmap = groupmap

	if not args.trmap:
		bsextract(wsets, args.outspec)
	else:
		trmap = loadkeymat(args.trmap, scalar=False)
		trextract(wsets, trmap, args.random, args.outspec)
